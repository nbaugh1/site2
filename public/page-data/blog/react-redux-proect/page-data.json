{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/blog/react-redux-proect/","result":{"data":{"site":{"siteMetadata":{"title":"Nick Baughman, Software Developer","social":[{"name":"Twitter","url":"https://twitter.com/nbaugh1"},{"name":"GitHub","url":"https://github.com/nbaugh1"}]}},"blogPost":{"id":"639b42bf-d86b-5612-97c2-c1bd767e437f","excerpt":"My final Flatiron School Online Software Engineering Bootcamp capstone project, titled ReOrder, is a fullstack web application utilizing a…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Project 5: React/Redux Rails\",\n  \"date\": \"2019-11-06T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"My final Flatiron School Online Software Engineering Bootcamp capstone project, titled ReOrder, is a fullstack web application utilizing a React/Redux JS frontend and a Ruby on Rails API backend. The function of this app is to allow a user to create a list of items, which have a name and a desired amount (called a \\u2018par\\u2019) and an amount \\u2018on hand\\u2019 which is input by the user. The app calculates the difference between the par and the on hand amount of each item and displays the \\u2018amount needed\\u2019 of each item dynamically as the on hand amount is entered by the user. The amounts needed of each item are then compiled into a \\u201Corder\\u201D which is a list showing the item names and the amounts needed of each item. The user is then able to give the order a name and a delivery date, and then save the order to the database.\"), mdx(\"p\", null, \"The main purpose of building this application was to gain insight into working with React and Redux which, as usual, I\\u2019d been shown how to do but hadn\\u2019t actually done yet. The first challenge is always sorting out where to start and when to start applying all of the new things I just learned. Do I build components first? What dependencies do I need to install? What about routing, should I plan that out first? How do I initially present the app to the user? What exactly is Redux again? Luckily our cohort lead always leaves us with a final walkthrough of how to get our project rolling, so, as usual, I started there.\"), mdx(\"p\", null, \"Building out the Rails backend was the first step. Easy enough to do with the Rails API generator and scaffold. This app is pretty simple, only requiring 2 models (and tables), Items and Orders. Most of the work on the back end actually involved making the app ready to be deployed on Heroku. This is a whole can of worms that is basically separate from the objective of the project, so I won\\u2019t get into it here but I followed this walkthrough: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://blog.heroku.com/a-rock-solid-modern-web-stack\"\n  }), \"https://blog.heroku.com/a-rock-solid-modern-web-stack\")), mdx(\"p\", null, \"The real work was building the frontend. To start, a React app was created inside of my Rails API, inside of a client folder (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"create-react-app client\"), \"). This builds out the basic framework for a React app. React introduces is use of Components into JavaScript, which utilize \\u201Cstate\\u201D as a way of handling and dynamically presenting data inside of the DOM. Anytime the state of a React Component changes, that Component is re-rendered and able to present new data while any other unrelated Components, who\\u2019s state hasn\\u2019t changed, remain the same.\"), mdx(\"p\", null, \"The other half of the frontend is Redux. Redux modifies React by creating a \\u201Cstore\\u201D, which is essentially a global location where state, which has been extracted from React components, is kept. Redux makes changes to its store by dispatching actions to a reducer. The reducer is a switch that makes changes to its state (and therefore the store) based on the \\u2018type\\u2019 of action dispatched to it. React components access the Redux store and these dispatch functions by mapping its state to props (mapStateToProps) and mapping dispatch to props (mapDispatchToProp) by exporting a Redux \\u2018connected\\u2019 component. The connect function is imported from Redux and allows a component to send its state to the global store. Dispatch actions can be directly imported and connected: import { doAction } from \\u2018./actions/index \\u2026 export default connect(mapStateToProps, { doAction })(NameOfExportedComponent)\"), mdx(\"p\", null, \"What I\\u2019ve discovered is that using Redux makes your Components more independent and flexible than they would be otherwise. Without Redux, in order for Components to share state (aka data) a relationship chain is required, which eventually can become complicated and unpredictable. With Redux, a Component is able to reach out to the store and access that data as if the store were a database.\"), mdx(\"p\", null, \"With this capability in mind, Components are then structured into Container and Presentational components. Container components manage data, how things work and are usually stateful, whereas Presentational components deal with how things look and the actual rendering. Presentational components are stateless ideally, accessing data through props passed from a Container component.\"), mdx(\"p\", null, \"Development of this app also included installing Thunk middleware to allow asynchronous communication with the Rails API, client-side routing using react-router, and styling with React Bootstrap.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/blog/react-redux-proect/","title":"Project 5: React/Redux Rails","tags":[],"keywords":[],"date":"November 06, 2019"},"previous":{"id":"f93a25a3-ed1e-5d24-81b3-7152a9d3c3f7","excerpt":"I’m just about to break out into the home stretch of my Flatiron School Software Engineering bootcamp. This is my 4th out of 5 portfolio…","slug":"/blog/js-rails-api/","title":"Project 4: JavaScript/Rails API – Part I","date":"October 09, 2019"},"next":{"id":"8ce3daa1-a04e-5207-a9a0-babb0db08467","excerpt":"One more bootcamp blog post to cap things off. Somehow the last 5 months were both the longest and fastest 5 months of my life I think. The…","slug":"/blog/done/","title":"Done!","date":"November 27, 2019"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"639b42bf-d86b-5612-97c2-c1bd767e437f","previousId":"f93a25a3-ed1e-5d24-81b3-7152a9d3c3f7","nextId":"8ce3daa1-a04e-5207-a9a0-babb0db08467"}}}