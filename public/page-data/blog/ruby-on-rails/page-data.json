{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/blog/ruby-on-rails/","result":{"data":{"site":{"siteMetadata":{"title":"Nick Baughman, Software Developer","social":[{"name":"Twitter","url":"https://twitter.com/nbaugh1"},{"name":"GitHub","url":"https://github.com/nbaugh1"}]}},"blogPost":{"id":"e14582fe-16d1-5bc8-8924-5fa4b95526dc","excerpt":"The task for our third module project in the Flatiron bootcamp is creating an app using Ruby on Rails. Rails is a framework that used the…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Project 3: Ruby on Rails\",\n  \"date\": \"2019-09-16T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The task for our third module project in the Flatiron bootcamp is creating an app using Ruby on Rails. Rails is a framework that used the Model View Controller design pattern to assist in building applications using Ruby via various gems, helpers, ActiveRecord, and magic. The requirements for the project include various ActiveRecord associations, data validations, user signup, login, and onmiauth login from a thrid party.\"), mdx(\"p\", null, \"My plan for my project is to create an app which a person can use to log their dining experiences at different restaurants. Essentially my app can be described as a combination of Twitter and Yelp. The inspiration behind this idea is inability to ever remember all of the various places my partner and I have eaten at during our time living here in NYC. My initial strategy for this project is to start simple and small, meet the project requirements as quickly as possible, keep and clean and uniform site design (I decided to use the Bootstrap CSS layout for this project) throughout development, and use any extra time for the in the week adding extra features.\"), mdx(\"p\", null, \"My first steps in building the app are to create the models, build the database, controllers and some initial views. Rails makes this a pretty simple process with its various rails generate commands that take care of the dirty work of creating your models, controllers, migrations and other various parts of your app.\"), mdx(\"p\", null, \"Setting up object associations in Rails is a breeze. has_many and belongs_to relationships are established simply by adding lines like the following to your models:\"), mdx(\"p\", null, \"class User < ApplicationRecord\\nhas_many :visits\\nhas_many :restaurants, through: :visits\\nThe has_many and has_many through ActiveRecord methods handle the SQL dirty work of assigning foreign keys and associating objects through a join table ( :visits ).\"), mdx(\"p\", null, \"My next steps are to stub out Controllers (along with CRUD Actions) and Views for some of the basic functions of the app. Following that, adding sign up and routine login features. This is something that was much easier the second time around. Plenty of lessons were learned while adding user authorization and authentication to my Sinatra app, so this time around combined with Rails helpers like form_for, I had this part up and running pretty seamlessly. OAuth is a different matter.\"), mdx(\"p\", null, \"I decided to use Google OAuth, rather than Facebook, because for some reason I though it might be \\u201Cfun\\u201D to try out a service that we hadn\\u2019t covered in our study groups.\"), mdx(\"p\", null, \"Well, not really. The dumb part was thinking that the process would be much different depending on the provider and that I wouldn\\u2019t really be able to rely on the lessons from my study groups. Well I was wrong. As it turns out the process is almost exactly the same. Something that I\\u2019m sure my instructor would have told me if I hadn\\u2019t waited until the end of the week to work on this part of the the project, after office hours had ended. That is dumb. Oh well, I got it working regardless and again learned a lot of things in the process. I can\\u2019t wait to start to explore what\\u2019s possible using tools like Google\\u2019s and Yelp\\u2019s APIs when I have time to go more in depth. Like my last project, I plan on continuing to develop it after I submit it for review. Hopefully it gets more extra-cirrcular attention than my Sinatra project did. ( I expanded on that one a fair amount after I submitted it, but eventually my regular curriculum took over all of my time again. It seemed kind of distracting going back to Sinatra while learning Rails.)\"), mdx(\"p\", null, \"Getting OAuth working is one of my favorite accomplishments so far throughout my bootcamp experience. It was a bit of a painstaking process the first time around which I hope will become much easier with experience, the result is a very handy feature that everyone who uses apps understands. So far, without much reflection, my top moments so far have been -Getting Sign in with Google to work, -Connecting to and using an external API for the first time, and -Successfully scraping data with my CLI gem.\"), mdx(\"p\", null, \"Next on up on my app is getting all of my models and database tables associated correctly. My User class already has a lot of work done due to login work, I decided to get my Visits resources stubbed out next because they\\u2019d be relatively simple. My Visit class is also acting as a JOIN table between my User class and my Restaurant class. By using has_many :through in my models, and adding a user_id and a restaurant_id column to the Visits table, I am able to call methods: user.restaurants and restaurants.users, as well as user.visits and restaurant.visits.\"), mdx(\"p\", null, \"After setting up my Visits class I moved on to connecting to the Yelp API to help build my Restaurant objects. I wanted to use an API in this situation because it seemed like an easy way to have handle the data I would need to use for this object. This feature is in a very basic form but what how it works is: a user enters the name of a restaurant, that name is used to query the Yelp API Business Search, and the top result\\u2019s data is used to build a Restaurant object (using the name, display address, and id for now). There are many flaws and many ways for this feature to be improved, however this is a Minimum Viable Product situation.\"), mdx(\"p\", null, \"Last on my plate before I feel like this project is ready to be reviewed setting up my views to display various things like user.restaurants, resturants.users, etc. By that point I\\u2019ll feel like its good enough to submit, but still has mountains of work left to do. I need to add better validations, trim down my routes, refactor my views, add more error displays, just to name a few things. Finally, I plan on figuring how to get this thing up on Heroku and see what happens with that.\"), mdx(\"p\", null, \"Github: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/nbaugh1/wdye\"\n  }), \"https://github.com/nbaugh1/wdye\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/blog/ruby-on-rails/","title":"Project 3: Ruby on Rails","tags":[],"keywords":[],"date":"September 16, 2019"},"previous":{"id":"d55ba5a5-f2cf-58fb-bcf0-bb8a6c736369","excerpt":"For my Sinatra module portfolio project I decided to make an app to build a fantasy football team roster. The requirements for this project…","slug":"/blog/sinatra-CRUD-MVC/","title":"Project 2: Sinatra CRUD MVC","date":"August 12, 2019"},"next":{"id":"f93a25a3-ed1e-5d24-81b3-7152a9d3c3f7","excerpt":"I’m just about to break out into the home stretch of my Flatiron School Software Engineering bootcamp. This is my 4th out of 5 portfolio…","slug":"/blog/js-rails-api/","title":"Project 4: JavaScript/Rails API – Part I","date":"October 09, 2019"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"e14582fe-16d1-5bc8-8924-5fa4b95526dc","previousId":"d55ba5a5-f2cf-58fb-bcf0-bb8a6c736369","nextId":"f93a25a3-ed1e-5d24-81b3-7152a9d3c3f7"}}}